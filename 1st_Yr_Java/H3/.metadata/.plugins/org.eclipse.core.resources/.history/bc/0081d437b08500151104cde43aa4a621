
public class Hangman 
{
	private final String secretWord;
	private char [] disguisedWord;
	private int guessCount;
	private int missesCount;
	private int MAX_MISSES_ALLOWED;
	private char [] missedMarkers;
	public static int GamesPlayed = 0;
	public Hangman()
	{
		secretWord = "big bang";
		disguisedWord = new char[secretWord.length()];
		setDisguisedWord();
		missedMarkers = new char [7];
		setMissedMarkers();
		guessCount = 0;
		missesCount = 0;
		MAX_MISSES_ALLOWED = 7;
		Hangman.GamesPlayed ++;
	}
	public boolean guessCharacter (char c)
	{
		boolean guess = false;
		for (int i = 0; i < secretWord.length(); i++)
		{
		if ( c == secretWord.charAt(i))
		{
			disguisedWord [i] = c;
			guess = true;
		}
		else
		{
			missedMarkers [missesCount] = 'X';
			missesCount ++;
		}
		}
		return (guess);
	}
	public boolean isGameOver ()
	{
		boolean game = false;
		if (missesCount == MAX_MISSES_ALLOWED)
		{
			game = true; 
		}
		return (game);
	}
	public boolean isFound ()
	{
		boolean found = true;
		for (int i = 0; i < disguisedWord.length; i++)
		{
			if (disguisedWord [i] == '?')
			{
				found = false;
			}
		}
		return (found);
	}
	public String getDisguisedword ()
	{
		String Disguisedword = new String (disguisedWord);
		return(Disguisedword);
	}
	public int getGuessCount ()
	{
		return (guessCount);
	}
	public int getMissesCount ()
	{
		return (missesCount);
	}
	public int getGamesPlayed()
	{
		return (GamesPlayed);
	}

	private void setDisguisedWord()
	{
		for (int i = 0; i < secretWord.length(); i ++)
		{
			if (secretWord.charAt(i) == ' ')
			{
				disguisedWord [i] = ' ';
			}
			else
			{
				disguisedWord [i] = '?';
			}
		}
	}
	private void setMissedMarkers() 
	{
		for (int i = 0; i < MAX_MISSES_ALLOWED; i++)
		{
			missedMarkers [i] = 'O';
		}
		
	}
	
}
